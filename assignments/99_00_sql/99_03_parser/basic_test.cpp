#include "gtest/gtest.h"
#include <iostream> // cout, endl
#include <iomanip>  // setw
#include <string>   // string
#include <cstring>  // strcpy
#include <vector>   // vector

//------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/parser/parser.h"



//------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

const string LINE = "\n"+string(50,'-')+"\n";
const string DASH = "\n"+string(50,'.')+"\n";

bool basic_test(bool debug=false)
{
  string str;
  char s[300];
  Parser parser;
  MMap<string, string> tree;
  vector<string> v = {
    "create table student fields last, first, age, major, class",
    "insert into student values Jones,\"Sue Ellen\", 20, CS, Fr ",
    "select * from student",
    "select lname, fname from student where lname = \"Yao\" and fname = \"Flo\"",
    "select age, lname, fname from student where fname = \"Mary Ann\" and lname = Yao",
    "select * from student where (age>=25 or lname = Yao) and (fname = \"Teresa Mae\" or Major = CS)"
  };

  cout << LINE << endl;
  for (string str : v)
  {
    strcpy(s, str.c_str());
    parser.set_string(s);
    tree = parser.parse_tree(); 
    cout << right << setw(10) << "input" << " " << left << setw(5) << ":" << s << endl;
    tree.print_lookup();
    cout << LINE << endl;
  }

  return true;
}


//Lord help me! 
const bool debug = false;

TEST(BASIC_TEST, BasicTest)
{
  bool success = basic_test(debug);
  EXPECT_EQ(success, true);
}


int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}


/*
includes
├── linked_list
│   ├── linked_list_functions
│   │   └── linked_list_functions.h
│   ├── node
│   │   └── node.h
│   ├── queue
│   │   └── MyQueue.h
│   └── stack
│       └── MyStack.h
├── map
│   ├── bplustree.h
│   ├── btree_array_functions.h
│   ├── map.h
│   ├── mmap.h
│   ├── mpair.h
│   └── pair.h
├── parser
│   ├── constants.h
│   ├── parser.cpp
│   └── parser.h
└── tokenizer
    ├── constants.h
    ├── ftokenize.cpp
    ├── ftokenize.h
    ├── state_machine_functions.cpp
    ├── state_machine_functions.h
    ├── stokenize.cpp
    ├── stokenize.h
    ├── token.cpp
    └── token.h

4 directories, 22 files


----------running basic_test.cpp---------


[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from BASIC_TEST
[ RUN      ] BASIC_TEST.BasicTest

--------------------------------------------------

     input :    create table student fields last, first, age, major, class
   command :    create
    fields :    last first age major class
table_name :    student

--------------------------------------------------

     input :    insert into student values Jones,"Sue Ellen", 20, CS, Fr 
   command :    insert
table_name :    student
    values :    Jones Sue Ellen 20 CS Fr

--------------------------------------------------

     input :    select * from student
   command :    select
    fields :    *
table_name :    student

--------------------------------------------------

     input :    select lname, fname from student where lname = "Yao" and fname = "Flo"
   command :    select
 condition :    lname = Yao and fname = Flo
    fields :    lname fname
table_name :    student
     where :    yes

--------------------------------------------------

     input :    select age, lname, fname from student where fname = "Mary Ann" and lname = Yao
   command :    select
 condition :    fname = Mary Ann and lname = Yao
    fields :    age lname fname
table_name :    student
     where :    yes

--------------------------------------------------

     input :    select * from student where (age>=25 or lname = Yao) and (fname = "Teresa Mae" or Major = CS)
   command :    select
 condition :    ( age >= 25 or lname = Yao ) and ( fname = Teresa Mae or Major = CS )
    fields :    *
table_name :    student
     where :    yes

--------------------------------------------------

[       OK ] BASIC_TEST.BasicTest (2 ms)
[----------] 1 test from BASIC_TEST (2 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (2 ms total)
[  PASSED  ] 1 test.
*/