#include "gtest/gtest.h"
#include <iostream>
#include <iomanip>

//------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/heap/heap.h"



//------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

int random(int low, int high)
{
  //call srand in main if you want better random numbers.
  return static_cast<int>(low + (rand() % static_cast<int>((high - low + 1))));
}

const string LINE = "\n"+string(50,'-')+"\n";
const string DASH = "\n"+string(50,'.')+"\n";

bool test_heap(bool debug=false)
{
  Heap<int> heap;

  cout << "Heap Test" << LINE;
  cout << "heap is not empty: " << boolalpha << heap.is_empty() << endl << endl;

  for (int i = 0; i < 21; i++)
  {
    heap.insert(random(10, 100));
  }

  cout << heap << LINE << endl;
  cout << "heap is not empty: " << boolalpha << heap.is_empty() << endl;
  cout << "number of elements on the heap: " << heap.size() << endl;
  cout << "the tree is " << (heap.verify() ? "" : "in") << "valid" << endl;

  int* heap_array = heap.heap_array();
  int* walker = heap_array;

  cout << "heap array: " << endl;
  for (int i = 0; i < heap.size(); i++)
  {
    cout << "|" << *walker++;
  }
  cout << "|";

  cout << endl << LINE << endl << "Test pop()" << endl << LINE << endl;
  while (!heap.is_empty())
  {
    cout << "removed: " << heap.top() << endl;
    heap.remove();
    if(heap.is_empty())
      cout << "tree is now empty." << endl;
    else
      cout << "top of the heap: " << heap.top() << endl;
    cout << "number of elements on the heap: " << heap.size() << endl;
    cout << "the tree is " << (heap.verify() ? "" : "in") << "valid" << endl;
    cout << "the new tree: " << endl << endl << heap << DASH << endl;
  }

  delete [] heap_array;

  return true;
}


//Lord help me! 
const bool debug = false;

TEST(BASIC_TES, TestHeap)
{
  bool success = test_heap(debug);
  EXPECT_EQ(success, true);
}


int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}

/*
build git:(master) âœ—  ðŸ˜Š $> tree ../includes
../includes
â””â”€â”€ heap
    â””â”€â”€ heap.h

1 directory, 2 files
build git:(master) âœ—  ðŸ˜Š $> ./bin/basic_test


----------running basic_test.cpp---------


[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from BASIC_TES
[ RUN      ] BASIC_TES.TestHeap
Heap Test
--------------------------------------------------
heap is not empty: true

            31
        73
            65
    82
            54
        73
            33
86
            65
        72
                28
            41
                32
    72
                21
            66
                42
        67
                39
            40
                36

--------------------------------------------------

heap is not empty: false
number of elements on the heap: 21
the tree is valid
heap array: 
|86|72|82|67|72|73|73|40|66|41|65|33|54|65|31|36|39|42|21|32|28|

--------------------------------------------------

Test pop()

--------------------------------------------------

removed: 86
top of the heap: 82
number of elements on the heap: 20
the tree is valid
the new tree: 

            31
        73
            65
    73
            28
        54
            33
82
            65
        72
            41
                32
    72
                21
            66
                42
        67
                39
            40
                36

..................................................

removed: 82
top of the heap: 73
number of elements on the heap: 19
the tree is valid
the new tree: 

            31
        65
            32
    73
            28
        54
            33
73
            65
        72
            41
    72
                21
            66
                42
        67
                39
            40
                36

..................................................

removed: 73
top of the heap: 73
number of elements on the heap: 18
the tree is valid
the new tree: 

            31
        32
            21
    65
            28
        54
            33
73
            65
        72
            41
    72
            66
                42
        67
                39
            40
                36

..................................................

removed: 73
top of the heap: 72
number of elements on the heap: 17
the tree is valid
the new tree: 

            31
        32
            21
    65
            28
        54
            33
72
            42
        65
            41
    72
            66
        67
                39
            40
                36

..................................................

removed: 72
top of the heap: 72
number of elements on the heap: 16
the tree is valid
the new tree: 

            31
        32
            21
    65
            28
        54
            33
72
            42
        65
            41
    67
            39
        66
            40
                36

..................................................

removed: 72
top of the heap: 67
number of elements on the heap: 15
the tree is valid
the new tree: 

            31
        32
            21
    65
            28
        54
            33
67
            42
        65
            41
    66
            39
        40
            36

..................................................

removed: 67
top of the heap: 66
number of elements on the heap: 14
the tree is valid
the new tree: 

        32
            21
    65
            28
        54
            33
66
            31
        42
            41
    65
            39
        40
            36

..................................................

removed: 66
top of the heap: 65
number of elements on the heap: 13
the tree is valid
the new tree: 

        32
    65
            28
        54
            33
65
            31
        41
            21
    42
            39
        40
            36

..................................................

removed: 65
top of the heap: 65
number of elements on the heap: 12
the tree is valid
the new tree: 

        32
    54
        33
            28
65
            31
        41
            21
    42
            39
        40
            36

..................................................

removed: 65
top of the heap: 54
number of elements on the heap: 11
the tree is valid
the new tree: 

        32
    33
        28
54
            31
        41
            21
    42
            39
        40
            36

..................................................

removed: 54
top of the heap: 42
number of elements on the heap: 10
the tree is valid
the new tree: 

        32
    33
        28
42
        31
            21
    41
            39
        40
            36

..................................................

removed: 42
top of the heap: 41
number of elements on the heap: 9
the tree is valid
the new tree: 

        32
    33
        28
41
        31
    40
            21
        39
            36

..................................................

removed: 41
top of the heap: 40
number of elements on the heap: 8
the tree is valid
the new tree: 

        32
    33
        28
40
        31
    39
        36
            21

..................................................

removed: 40
top of the heap: 39
number of elements on the heap: 7
the tree is valid
the new tree: 

        32
    33
        28
39
        31
    36
        21

..................................................

removed: 39
top of the heap: 36
number of elements on the heap: 6
the tree is valid
the new tree: 

    33
        28
36
        31
    32
        21

..................................................

removed: 36
top of the heap: 33
number of elements on the heap: 5
the tree is valid
the new tree: 

    28
33
        31
    32
        21

..................................................

removed: 33
top of the heap: 32
number of elements on the heap: 4
the tree is valid
the new tree: 

    28
32
    31
        21

..................................................

removed: 32
top of the heap: 31
number of elements on the heap: 3
the tree is valid
the new tree: 

    28
31
    21

..................................................

removed: 31
top of the heap: 28
number of elements on the heap: 2
the tree is valid
the new tree: 

28
    21

..................................................

removed: 28
top of the heap: 21
number of elements on the heap: 1
the tree is valid
the new tree: 

21

..................................................

removed: 21
tree is now empty.
number of elements on the heap: 0
the tree is valid
the new tree: 


..................................................

[       OK ] BASIC_TES.TestHeap (7 ms)
[----------] 1 test from BASIC_TES (7 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (25 ms total)
[  PASSED  ] 1 test.
*/