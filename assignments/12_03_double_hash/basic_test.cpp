#include "gtest/gtest.h"
#include <iostream>
#include <iomanip>

//------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/hash/double_hash.h"
#include "../../includes/hash/hash_record.h"


//------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

int random(int low, int high)
{
  //call srand in main if you want better random numbers.
  return static_cast<int>(low + (rand() % static_cast<int>((high - low + 1))));
}

bool basic_test(bool debug=false)
{
  cout << "Double Test" << endl << endl;

  // Default constructor
  DoubleHash<HashRecord> double_hash;
  // Initial HashRecord
  HashRecord hash_record;
  // Init
  bool found = false;
  int initial_size = double_hash.size();
  int initial_collision = double_hash.collision();

  // Insert to hash
  for (int i = 0; i < double_hash.capacity() * 0.75; i++)
  {
    int r = random(100, 999);
    double_hash.insert(HashRecord(r, string("item__") + to_string(r)));
  }
  // Insert non-prime key
  double_hash.insert(HashRecord(42, string("This is the meaning of life? A NON-PRIME number? @_@")));
  cout << "double_hash after all the insertions: " << endl << double_hash << endl << endl;

  // Report of operations
  cout << "DoubleHash:" << endl;
  cout << "             capacity:              " << double_hash.capacity() << endl;
  cout << "             initial size:          " << initial_size << endl;
  cout << "             initial collision:     " << initial_collision << endl;
  cout << "             final size:            " << double_hash.size() << endl;
  cout << "             final collision:       " << double_hash.collision() << endl;
  cout << "             is_present(42):        " << boolalpha << double_hash.is_present(42) << endl;
  cout << "             is_present(52):        " << boolalpha << double_hash.is_present(52) << endl;
 
  // remove key
  double_hash.remove(42);
  cout << "             is_present(42):        " << boolalpha << double_hash.is_present(42) << endl;

  // find existing key
  double_hash.find(42, found, hash_record);
  cout << "             find(42):              " << boolalpha << found << " :: " << hash_record << endl;
  // find non-existing key
  double_hash.find(52, found, hash_record);
  cout << "             find(52):              " << boolalpha << found << " :: " << hash_record << endl;

  cout << endl;
  cout << "---------------------------------------------------------------" << endl;
  cout << "The print anatomy:" << endl;
  cout << "[006] [640:item__640](013)*hash2: 12" << endl << endl;
  cout << ". . . . . . . . . . . . . . . . . . " << endl;
  cout << "[006]:           table index." << endl;
  cout << "[640:item__640]: record inserted: record's insertion operator" << endl;
  cout << "(013):           index where the record was originally hashed to" << endl;
  cout << "*                indicates there has been one or more collisions" << endl;
  cout << "hash2: 12:       value of hash2, the steps taken once a collision" << endl;
  cout << "                 has been detected " << endl;
  cout << "---------------------------------------------------------------" << endl;
  cout << endl;

  if (!found) {
    cout << "42 was removed successfully: " << endl << double_hash << endl << endl;
    cout << "---------------------------------------------------------------" << endl;
    cout << "[011] - - - - - - " << endl;
    cout << "Note the indication of the 'PREVIOUSLY_USED' row" << endl;
    cout << "---------------------------------------------------------------" << endl;
  } else {
    cout << "FAILED to remove 42" << endl;
  }

  // Copy constructor
  // replace key:42
  double_hash.insert(HashRecord(42, string("This is the meaning of life? A NON-PRIME number? >_<")));
  DoubleHash<HashRecord> double_hash_2(double_hash);
  cout << endl;
  cout << "double_hash_2 copy from double_hash: " << endl << double_hash_2 << endl << endl;
  cout << "---------------------------------------------------------------" << endl;

  // Assignment operator
  // remove key:42
  double_hash_2.remove(42);
  DoubleHash<HashRecord> double_hash_3;
  double_hash_3 = double_hash_2;
  cout << endl;
  cout << "double_hash_3 copy from double_hash_2: " << endl << double_hash_3 << endl << endl;
  cout << "---------------------------------------------------------------" << endl;

  return true;
}


//Lord help me! 
const bool debug = false;

TEST(TEST_DOUBLE_HASH, BasicTest)
{
  bool success = basic_test(debug);
  EXPECT_EQ(success, true);
}


int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}


/*
includes
└── hash
    ├── double_hash.h
    └── hash_record.h

1 directory, 2 files

----------running basic_test.cpp---------


[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from TEST_DOUBLE_HASH
[ RUN      ] TEST_DOUBLE_HASH.BasicTest
Double Test

double_hash after all the insertions: 
[000] [209:item__209](000)
[001] 
[002] [858:item__858](003)*hash2: 9
[003] [573:item__573](003)
[004] [707:item__707](004)
[005] [423:item__423](005)
[006] [640:item__640](013)*hash2: 12
[007] [972:item__972](003)*hash2: 4
[008] [844:item__844](008)
[009] [765:item__765](005)*hash2: 1
[010] [487:item__487](012)*hash2: 12
[011] [42:This is the meaning of life? A NON-PRIME number? @_@](004)*hash2: 9
[012] [449:item__449](012)
[013] [230:item__230](002)*hash2: 10
[014] 
[015] [342:item__342](000)*hash2: 3
[016] 
[017] [378:item__378](017)
[018] [592:item__592](003)*hash2: 15
----------- collision(): 25 -----------

DoubleHash:
             capacity:              19
             initial size:          0
             initial collision:     0
             final size:            16
             final collision:       25
             is_present(42):        true
             is_present(52):        false
             is_present(42):        false
             find(42):              false :: [-1:]
             find(52):              false :: [-1:]

---------------------------------------------------------------
The print anatomy:
[006] [640:item__640](013)*hash2: 12

. . . . . . . . . . . . . . . . . . 
[006]:           table index.
[640:item__640]: record inserted: record's insertion operator
(013):           index where the record was originally hashed to
*                indicates there has been one or more collisions
hash2: 12:       value of hash2, the steps taken once a collision
                 has been detected 
---------------------------------------------------------------

42 was removed successfully: 
[000] [209:item__209](000)
[001] 
[002] [858:item__858](003)*hash2: 9
[003] [573:item__573](003)
[004] [707:item__707](004)
[005] [423:item__423](005)
[006] [640:item__640](013)*hash2: 12
[007] [972:item__972](003)*hash2: 4
[008] [844:item__844](008)
[009] [765:item__765](005)*hash2: 1
[010] [487:item__487](012)*hash2: 12
[011]  - - - - - -
[012] [449:item__449](012)
[013] [230:item__230](002)*hash2: 10
[014] 
[015] [342:item__342](000)*hash2: 3
[016] 
[017] [378:item__378](017)
[018] [592:item__592](003)*hash2: 15
----------- collision(): 25 -----------

---------------------------------------------------------------
[011] - - - - - - 
Note the indication of the 'PREVIOUSLY_USED' row
---------------------------------------------------------------

double_hash_2 copy from double_hash: 
[000] [209:item__209](000)
[001] 
[002] [858:item__858](003)*hash2: 9
[003] [573:item__573](003)
[004] [707:item__707](004)
[005] [423:item__423](005)
[006] [640:item__640](013)*hash2: 12
[007] [972:item__972](003)*hash2: 4
[008] [844:item__844](008)
[009] [765:item__765](005)*hash2: 1
[010] [487:item__487](012)*hash2: 12
[011] [42:This is the meaning of life? A NON-PRIME number? >_<](004)*hash2: 9
[012] [449:item__449](012)
[013] [230:item__230](002)*hash2: 10
[014] 
[015] [342:item__342](000)*hash2: 3
[016] 
[017] [378:item__378](017)
[018] [592:item__592](003)*hash2: 15
----------- collision(): 30 -----------

---------------------------------------------------------------

double_hash_3 copy from double_hash_2: 
[000] [209:item__209](000)
[001] 
[002] [858:item__858](003)*hash2: 9
[003] [573:item__573](003)
[004] [707:item__707](004)
[005] [423:item__423](005)
[006] [640:item__640](013)*hash2: 12
[007] [972:item__972](003)*hash2: 4
[008] [844:item__844](008)
[009] [765:item__765](005)*hash2: 1
[010] [487:item__487](012)*hash2: 12
[011]  - - - - - -
[012] [449:item__449](012)
[013] [230:item__230](002)*hash2: 10
[014] 
[015] [342:item__342](000)*hash2: 3
[016] 
[017] [378:item__378](017)
[018] [592:item__592](003)*hash2: 15
----------- collision(): 30 -----------

---------------------------------------------------------------
[       OK ] TEST_DOUBLE_HASH.BasicTest (2 ms)
[----------] 1 test from TEST_DOUBLE_HASH (2 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (2 ms total)
[  PASSED  ] 1 test.
*/