#include "gtest/gtest.h"
#include <iostream>
#include <iomanip>

//------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/btree_array_functions/btree_array_functions.h"
#include "../../includes/btree/btree.h"



//------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

const string LINE = "\n"+string(50,'-')+"\n";
const string DASH = "\n"+string(50,'.')+"\n";

void fill_array(int* src, size_t size)
{
  for (size_t i = 0; i<size; i++) {
    src[i] = i*10+5;
  }
}

bool basic_test_array_functions(bool debug=false)
{
  const std::size_t CAPACITY = 100;
  int* a = new int [CAPACITY]; // 5,15,25,35,45
  size_t n = 5;
  fill_array(a, n);
  int entry=1;
  EXPECT_EQ(index_of_maximal(a, n), 4);

  EXPECT_EQ(first_ge(a, n, entry), 0);
  entry *= 10; // 10
  EXPECT_EQ(first_ge(a, n, entry), 1);
  entry += 5; // 15
  EXPECT_EQ(first_ge(a, n, entry), 1);
  entry *= 10; // 150
  EXPECT_EQ(first_ge(a, n, entry), 5);

  insert_item(a, 1, n, 13); // 5,13,15,25,35,45
  EXPECT_EQ(n, 6);

  attach_item(a, n, 60); // 5,13,15,25,35,45,60
  EXPECT_EQ(n, 7);

  ordered_insert(a, n, 50); // 5,13,15,25,35,45,50,60
  EXPECT_EQ(a[6], 50);
  EXPECT_EQ(n, 8);

  delete_item(a, 1, n, entry); // 5,15,25,35,45,50,60
  EXPECT_EQ(entry, 13);
  EXPECT_EQ(n, 7);

  detach_item(a, n, entry); // 5,15,25,35,45,50
  EXPECT_EQ(entry, 60);
  EXPECT_EQ(n, 6);

  int* a2 = new int [CAPACITY];
  a2[0] = 60;
  a2[1] = 70;
  a2[2] = 80;
  size_t n2 = 3;

  merge(a, n, a2, n2);
  // a = 5,15,25,35,45,50,60,70,80
  // a2= 60,70,80, n2=0
  EXPECT_EQ(n, 9);
  EXPECT_EQ(n2, 0);
  // reset n2
  n2 = 3;

  split(a, n, a2, n2);
  // a = 5,15,25,35,45
  // a2= 50,60,70,80
  EXPECT_EQ(n, 5);
  EXPECT_EQ(n2, 4);

  copy_array(a, a2, n, n2);
  // a = 50,60,70,80
  // a2= 50,60,70,80
  EXPECT_EQ(n, n2);

  // entry = 60
  EXPECT_FALSE(is_le(a, n, entry));
  EXPECT_TRUE(is_le(a, n, entry/2));

  EXPECT_FALSE(is_gt(a, n, entry));
  EXPECT_TRUE(is_gt(a, n, entry*2));

  // print_array(a, n); // a = 50,60,70,80

  delete [] a;
  delete [] a2;
  return true;
}

bool basic_test_btree(bool debug=false)
{
  int a[] = {43, 20, 96, 100, 69};
  size_t n = 5;
  BTree<int> bt(a, n);
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;

  cout << endl;
  cout << "adding 10, 50, 200: " << endl;
  bt.insert(10);
  bt.insert(50);
  bt.insert(200);
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;
  cout << "Here is the tree: " << endl << bt << endl;

  cout << "bt.contains(20): " << boolalpha << bt.contains(20) << endl;
  cout << "bt.contains(0): " << boolalpha << bt.contains(0) << endl;
  cout << "bt.find(20): " << *(bt.find(20)) << endl;
  cout << "bt.find(0): " << bt.find(0) << endl;
  cout << "bt.get(20): " << bt.get(20) << endl;

  cout << "\n\nexcess + grow: " << endl;

  bt.insert(12);
  cout << "adding 12: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;
  cout << endl;

  bt.insert(300);
  cout << "added 300: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;
  cout << endl;

  bt.insert(55);
  cout << "added 55: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;
  cout << endl;

  cout << "copying tree " << endl;
  BTree<int> bt2(bt);
  cout << "copy of bt :" << endl;
  cout << bt2;
  cout << "in order: |" << bt.in_order() << endl;
  cout << "tree size: " << bt.size() << endl;
  cout << endl;

  cout << LINE << endl;
  cout << "remove test: " << endl;
  cout << LINE << endl;

  int b[] = {43, 20, 96, 97, 10, 50, 200, 12, 1, 300, 400, 55, 100, 69};
  n = 14;
  for (size_t i = 0; i < n; i++){
    cout << "removing: [" << b[i] << "]" << endl;
    bt.erase(b[i]);
    cout << bt << endl;
    cout << "in order: |" << bt.in_order() << endl;
    cout << "tree size: " << bt.size() << endl;
    cout << "tree is empty: " << boolalpha << bt.empty() << endl;
    cout << DASH << endl;
  }

  cout << "remove on empty: " << boolalpha << bt.erase(666) << endl;

  cout << LINE << endl;

  return true;
}

//Lord help me! 
const bool debug = false;

TEST(BASIC_TEST, TestArrayFunctions)
{
  EXPECT_TRUE(basic_test_array_functions(debug));
}

TEST(BASIC_TEST, TestBtree)
{
  EXPECT_TRUE(basic_test_btree(debug));
}

int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}


/*
includes
├── btree
│   └── btree.h
└── btree_array_functions
    └── btree_array_functions.h

2 directories, 2 files

----------running basic_test.cpp---------


[==========] Running 2 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 2 tests from BASIC_TEST
[ RUN      ] BASIC_TEST.TestArrayFunctions
[       OK ] BASIC_TEST.TestArrayFunctions (0 ms)
[ RUN      ] BASIC_TEST.TestBtree
Here is the tree: 
    ﹇
    100
    ﹈
﹇
96
    ﹇
    69
    ﹈
43
﹈
    ﹇
    20
    ﹈

in order: |20|43|69|96|100|
tree size: 5

adding 10, 50, 200: 
in order: |10|20|43|50|69|96|100|200|
tree size: 8
Here is the tree: 
    ﹇
    200
    100
    ﹈
﹇
96
    ﹇
    69
    50
    ﹈
43
﹈
    ﹇
    20
    10
    ﹈

bt.contains(20): true
bt.contains(0): false
bt.find(20): 20
bt.find(0): 0x0
bt.get(20): 20


excess + grow: 
adding 12: 
Here is the tree: 
        ﹇
        200
        100
        ﹈
    ﹇
    96
    ﹈
        ﹇
        69
        50
        ﹈
﹇
43
﹈
        ﹇
        20
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|20|43|50|69|96|100|200|
tree size: 9

added 300: 
Here is the tree: 
        ﹇
        300
        ﹈
    ﹇
    200
        ﹇
        100
        ﹈
    96
    ﹈
        ﹇
        69
        50
        ﹈
﹇
43
﹈
        ﹇
        20
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|20|43|50|69|96|100|200|300|
tree size: 10

added 55: 
Here is the tree: 
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
96
        ﹇
        69
        ﹈
    ﹇
    55
    ﹈
        ﹇
        50
        ﹈
43
﹈
        ﹇
        20
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|20|43|50|55|69|96|100|200|300|
tree size: 11

copying tree 
copy of bt :
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
96
        ﹇
        69
        ﹈
    ﹇
    55
    ﹈
        ﹇
        50
        ﹈
43
﹈
        ﹇
        20
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈
in order: |10|12|20|43|50|55|69|96|100|200|300|
tree size: 11


--------------------------------------------------

remove test: 

--------------------------------------------------

removing: [43]
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
96
﹈
        ﹇
        69
        ﹈
    ﹇
    55
        ﹇
        50
        ﹈
    20
    ﹈
        ﹇
        12
        10
        ﹈

in order: |10|12|20|50|55|69|96|100|200|300|
tree size: 10
tree is empty: false

..................................................

removing: [20]
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
96
﹈
        ﹇
        69
        ﹈
    ﹇
    55
        ﹇
        50
        ﹈
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|50|55|69|96|100|200|300|
tree size: 9
tree is empty: false

..................................................

removing: [96]
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
69
﹈
        ﹇
        55
        50
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|50|55|69|100|200|300|
tree size: 8
tree is empty: false

..................................................

removing: [97]
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
69
﹈
        ﹇
        55
        50
        ﹈
    ﹇
    12
    ﹈
        ﹇
        10
        ﹈

in order: |10|12|50|55|69|100|200|300|
tree size: 8
tree is empty: false

..................................................

removing: [10]
        ﹇
        300
        ﹈
    ﹇
    200
    ﹈
        ﹇
        100
        ﹈
﹇
69
﹈
        ﹇
        55
        ﹈
    ﹇
    50
    ﹈
        ﹇
        12
        ﹈

in order: |12|50|55|69|100|200|300|
tree size: 7
tree is empty: false

..................................................

removing: [50]
    ﹇
    300
    ﹈
﹇
200
    ﹇
    100
    ﹈
69
﹈
    ﹇
    55
    12
    ﹈

in order: |12|55|69|100|200|300|
tree size: 6
tree is empty: false

..................................................

removing: [200]
    ﹇
    300
    ﹈
﹇
100
    ﹇
    69
    ﹈
55
﹈
    ﹇
    12
    ﹈

in order: |12|55|69|100|300|
tree size: 5
tree is empty: false

..................................................

removing: [12]
    ﹇
    300
    ﹈
﹇
100
﹈
    ﹇
    69
    55
    ﹈

in order: |55|69|100|300|
tree size: 4
tree is empty: false

..................................................

removing: [1]
    ﹇
    300
    ﹈
﹇
100
﹈
    ﹇
    69
    55
    ﹈

in order: |55|69|100|300|
tree size: 4
tree is empty: false

..................................................

removing: [300]
    ﹇
    100
    ﹈
﹇
69
﹈
    ﹇
    55
    ﹈

in order: |55|69|100|
tree size: 3
tree is empty: false

..................................................

removing: [400]
    ﹇
    100
    ﹈
﹇
69
﹈
    ﹇
    55
    ﹈

in order: |55|69|100|
tree size: 3
tree is empty: false

..................................................

removing: [55]
﹇
100
69
﹈

in order: |69|100|
tree size: 2
tree is empty: false

..................................................

removing: [100]
﹇
69
﹈

in order: |69|
tree size: 1
tree is empty: false

..................................................

removing: [69]
﹇
﹈

in order: |
tree size: 0
tree is empty: true

..................................................

remove on empty: false

--------------------------------------------------

[       OK ] BASIC_TEST.TestBtree (2 ms)
[----------] 2 tests from BASIC_TEST (2 ms total)

[----------] Global test environment tear-down
[==========] 2 tests from 1 test suite ran. (2 ms total)
[  PASSED  ] 2 tests.
*/