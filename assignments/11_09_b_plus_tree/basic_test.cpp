#include "gtest/gtest.h"
#include <iostream>
#include <iomanip>

//------------------------------------------------------------------------------
//Files we are testing:
#include "../../includes/bplustree/bplustree.h"



//------------------------------------------------------------------------------

using namespace std;

//------------------------------------------------------------------------------
//          COPY BASIC_TEST INTO THIS FILE.
//                    AND THEN,
//         DO NOT EDIT THIS FILE ANY FURTHER
//------------------------------------------------------------------------------

const string LINE = "\n"+string(50,'-')+"\n";
const string DASH = "\n"+string(50,'.')+"\n";

bool test_b_plus_tree(bool debug=false)
{
  int a[] = {43, 20, 96, 100, 69};
  size_t n = sizeof(a) / sizeof(a[0]);
  BPlusTree<int> bt(a, n);
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  cout << "adding 10, 50, 200: " << endl;
  bt.insert(10);
  bt.insert(50);
  bt.insert(200);
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  cout << "bt.contains(20): " << boolalpha << bt.contains(20) << endl;
  cout << "bt.contains(0): " << boolalpha << bt.contains(0) << endl;
  cout << "bt.find(20): " << *(bt.find(20)) << endl;
  cout << "bt.get(20) : " << bt.get(20) << endl;

  cout << "\nfind nonexisting key: " << endl;
  cout << "bt.find(0): ";
  bt.find(0).print_Iterator();
  cout << endl;

  cout << "\n\nexcess + grow: " << endl;
  bt.insert(12);
  cout << "adding 12: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  bt.insert(300);
  cout << "added 300: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  bt.insert(55);
  cout << "added 55: " << endl;
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  // Iterator test
  cout << LINE << endl;
  cout << "iterator test: list of data:" << endl;
  cout << LINE << endl;

  BPlusTree<int>::Iterator it = bt.begin();
  for (; it != bt.end(); it++)
  {
    cout << setw(5) << *it;
  }
  cout << endl;
  
  it = bt.begin();
  for (; it != bt.end(); ++it)
  {
    cout << setw(5) << *it;
  }
  cout << endl;

  cout << LINE << endl;
  cout << "remove test:" << endl;
  cout << LINE << endl;

  for (size_t i=1; i<10; i++) {
    bt.insert(100+i*5);
  }
  cout << "Here is the tree: " << endl << bt << endl;
  cout << "tree in order:  |" << bt.in_order() << endl;
  cout << "tree preorder:  |" << bt.pre_order() << endl;
  cout << "tree postorder: |" << bt.post_order() << endl;
  cout << "tree size is : " << bt.size() << endl;
  cout << "tree items is: " << bt.count() << endl;
  cout << "tree is empty: " << boolalpha << bt.empty() << endl;
  cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
  cout << endl;

  int b[] = {120, 100, 125, 140, 110};
  n = sizeof(b) / sizeof(b[0]);
  for (size_t i = 0; i < n; i++) {
    cout << "removing: [" << b[i] << "]" << endl;
    bt.erase(b[i]);
    cout << bt << endl;
    cout << "tree in order:  |" << bt.in_order() << endl;
    cout << "tree preorder:  |" << bt.pre_order() << endl;
    cout << "tree postorder: |" << bt.post_order() << endl;
    cout << "tree size is : " << bt.size() << endl;
    cout << "tree items is: " << bt.count() << endl;
    cout << "tree is empty: " << boolalpha << bt.empty() << endl;
    cout << "tree is valid: " << boolalpha << bt.is_valid() << endl;
    cout << DASH << endl;
  }

  cout << "remove on empty: " << boolalpha << bt.erase(666) << endl;

  cout << LINE << endl;

  return true;
}


//Lord help me! 
const bool debug = false;

TEST(BASIC_TEST, TestBPlusTree)
{
  EXPECT_TRUE(test_b_plus_tree(debug));
}


int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  std::cout<<"\n\n----------running basic_test.cpp---------\n\n"<<std::endl;
  return RUN_ALL_TESTS();
}


/*
includes
└── bplustree
    ├── bplustree.h
    └── btree_array_functions.h

1 directory, 2 files


----------running basic_test.cpp---------


[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from BASIC_TEST
[ RUN      ] BASIC_TEST.TestBPlusTree
Here is the tree: 
    ﹇
    100
    96
    ﹈
﹇
96
    ^
    ﹇
    69
    43
    ﹈
43
﹈
    ^
    ﹇
    20
    ﹈

tree in order:  |20|43|43|69|96|96|100|
tree preorder:  |43|20|96|43|69|96|100|
tree postorder: |20|43|69|43|96|100|96|
tree size is : 5
tree items is: 7
tree is empty: false
tree is valid: true

adding 10, 50, 200: 
Here is the tree: 
        ﹇
        200
        100
        ﹈
    ﹇
    100
        ^
        ﹇
        96
        ﹈
    96
    ﹈
        ^
        ﹇
        69
        50
        ﹈
﹇
50
﹈
        ^
        ﹇
        43
        ﹈
    ﹇
    43
    ﹈
        ^
        ﹇
        20
        10
        ﹈

tree in order:  |10|20|43|43|50|50|69|96|96|100|100|200|
tree preorder:  |50|43|10|20|43|96|50|69|100|96|100|200|
tree postorder: |10|20|43|43|50|69|96|96|100|200|100|50|
tree size is : 8
tree items is: 12
tree is empty: false
tree is valid: true

bt.contains(20): true
bt.contains(0): false
bt.find(20): 20
bt.get(20) : 20

find nonexisting key: 
bt.find(0): iterator: NULL, key_ptr: 0



excess + grow: 
adding 12: 
Here is the tree: 
        ﹇
        200
        100
        ﹈
    ﹇
    100
        ^
        ﹇
        96
        ﹈
    96
    ﹈
        ^
        ﹇
        69
        50
        ﹈
﹇
50
﹈
        ^
        ﹇
        43
        ﹈
    ﹇
    43
        ^
        ﹇
        20
        12
        ﹈
    12
    ﹈
        ^
        ﹇
        10
        ﹈

tree in order:  |10|12|12|20|43|43|50|50|69|96|96|100|100|200|
tree preorder:  |50|12|10|43|12|20|43|96|50|69|100|96|100|200|
tree postorder: |10|12|20|12|43|43|50|69|96|96|100|200|100|50|
tree size is : 9
tree items is: 14
tree is empty: false
tree is valid: true

added 300: 
Here is the tree: 
        ﹇
        300
        200
        ﹈
    ﹇
    200
    ﹈
        ^
        ﹇
        100
        ﹈
﹇
100
        ^
        ﹇
        96
        ﹈
    ﹇
    96
    ﹈
        ^
        ﹇
        69
        50
        ﹈
50
﹈
        ^
        ﹇
        43
        ﹈
    ﹇
    43
        ^
        ﹇
        20
        12
        ﹈
    12
    ﹈
        ^
        ﹇
        10
        ﹈

tree in order:  |10|12|12|20|43|43|50|50|69|96|96|100|100|200|200|300|
tree preorder:  |50|12|10|43|12|20|43|100|96|50|69|96|200|100|200|300|
tree postorder: |10|12|20|12|43|43|50|69|96|96|50|100|200|300|200|100|
tree size is : 10
tree items is: 16
tree is empty: false
tree is valid: true

added 55: 
Here is the tree: 
        ﹇
        300
        200
        ﹈
    ﹇
    200
    ﹈
        ^
        ﹇
        100
        ﹈
﹇
100
        ^
        ﹇
        96
        ﹈
    ﹇
    96
        ^
        ﹇
        69
        55
        ﹈
    55
    ﹈
        ^
        ﹇
        50
        ﹈
50
﹈
        ^
        ﹇
        43
        ﹈
    ﹇
    43
        ^
        ﹇
        20
        12
        ﹈
    12
    ﹈
        ^
        ﹇
        10
        ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|100|100|200|200|300|
tree preorder:  |50|12|10|43|12|20|43|100|55|50|96|55|69|96|200|100|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|100|200|300|200|100|
tree size is : 11
tree items is: 18
tree is empty: false
tree is valid: true


--------------------------------------------------

iterator test: list of data:

--------------------------------------------------

   10   12   20   43   50   55   69   96  100  200  300
   10   12   20   43   50   55   69   96  100  200  300

--------------------------------------------------

remove test:

--------------------------------------------------

Here is the tree: 
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            140
            ﹈
    ﹇
    140
            ^
            ﹇
            135
            ﹈
        ﹇
        135
        ﹈
            ^
            ﹇
            130
            ﹈
    130
    ﹈
            ^
            ﹇
            125
            ﹈
        ﹇
        125
        ﹈
            ^
            ﹇
            120
            ﹈
﹇
120
            ^
            ﹇
            115
            ﹈
        ﹇
        115
        ﹈
            ^
            ﹇
            110
            ﹈
    ﹇
    110
    ﹈
            ^
            ﹇
            105
            ﹈
        ﹇
        105
        ﹈
            ^
            ﹇
            100
            ﹈
100
﹈
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    ﹇
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|100|100|105|105|110|110|115|115|120|120|125|125|130|130|135|135|140|140|145|200|200|300|
tree preorder:  |100|50|12|10|43|12|20|43|55|50|96|55|69|96|120|110|105|100|105|115|110|115|130|125|120|125|140|135|130|135|200|140|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|100|105|105|110|115|115|110|100|120|125|125|130|135|135|130|140|145|200|300|200|140|120|
tree size is : 20
tree items is: 35
tree is empty: false
tree is valid: true

removing: [120]
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            140
            ﹈
    ﹇
    140
    ﹈
            ^
            ﹇
            135
            ﹈
        ﹇
        135
            ^
            ﹇
            130
            ﹈
        130
        ﹈
            ^
            ﹇
            125
            ﹈
﹇
125
            ^
            ﹇
            115
            ﹈
        ﹇
        115
        ﹈
            ^
            ﹇
            110
            ﹈
    ﹇
    110
    ﹈
            ^
            ﹇
            105
            ﹈
        ﹇
        105
        ﹈
            ^
            ﹇
            100
            ﹈
100
﹈
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    ﹇
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|100|100|105|105|110|110|115|115|125|125|130|130|135|135|140|140|145|200|200|300|
tree preorder:  |100|50|12|10|43|12|20|43|55|50|96|55|69|96|125|110|105|100|105|115|110|115|140|130|125|135|130|135|200|140|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|100|105|105|110|115|115|110|100|125|130|130|135|135|140|145|200|300|200|140|125|
tree size is : 19
tree items is: 33
tree is empty: false
tree is valid: true

..................................................

removing: [100]
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            140
            ﹈
    ﹇
    140
    ﹈
            ^
            ﹇
            135
            ﹈
        ﹇
        135
            ^
            ﹇
            130
            ﹈
        130
        ﹈
            ^
            ﹇
            125
            ﹈
﹇
125
﹈
            ^
            ﹇
            115
            ﹈
        ﹇
        115
            ^
            ﹇
            110
            ﹈
        110
        ﹈
            ^
            ﹇
            105
            ﹈
    ﹇
    105
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|105|105|110|110|115|115|125|125|130|130|135|135|140|140|145|200|200|300|
tree preorder:  |125|50|12|10|43|12|20|43|105|55|50|96|55|69|96|110|105|115|110|115|140|130|125|135|130|135|200|140|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|105|110|110|115|115|105|125|130|130|135|135|140|145|200|300|200|140|125|
tree size is : 18
tree items is: 31
tree is empty: false
tree is valid: true

..................................................

removing: [125]
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            140
            ﹈
    ﹇
    140
    ﹈
            ^
            ﹇
            135
            ﹈
        ﹇
        135
        ﹈
            ^
            ﹇
            130
            ﹈
﹇
130
﹈
            ^
            ﹇
            115
            ﹈
        ﹇
        115
            ^
            ﹇
            110
            ﹈
        110
        ﹈
            ^
            ﹇
            105
            ﹈
    ﹇
    105
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|105|105|110|110|115|115|130|130|135|135|140|140|145|200|200|300|
tree preorder:  |130|50|12|10|43|12|20|43|105|55|50|96|55|69|96|110|105|115|110|115|140|135|130|135|200|140|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|105|110|110|115|115|105|130|135|135|140|145|200|300|200|140|130|
tree size is : 17
tree items is: 29
tree is empty: false
tree is valid: true

..................................................

removing: [140]
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            ﹈
    ﹇
    145
    ﹈
            ^
            ﹇
            135
            ﹈
        ﹇
        135
        ﹈
            ^
            ﹇
            130
            ﹈
﹇
130
﹈
            ^
            ﹇
            115
            ﹈
        ﹇
        115
            ^
            ﹇
            110
            ﹈
        110
        ﹈
            ^
            ﹇
            105
            ﹈
    ﹇
    105
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|105|105|110|110|115|115|130|130|135|135|145|145|200|200|300|
tree preorder:  |130|50|12|10|43|12|20|43|105|55|50|96|55|69|96|110|105|115|110|115|145|135|130|135|200|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|105|110|110|115|115|105|130|135|135|145|200|300|200|145|130|
tree size is : 16
tree items is: 28
tree is empty: false
tree is valid: true

..................................................

removing: [110]
            ﹇
            300
            200
            ﹈
        ﹇
        200
        ﹈
            ^
            ﹇
            145
            ﹈
    ﹇
    145
    ﹈
            ^
            ﹇
            135
            ﹈
        ﹇
        135
        ﹈
            ^
            ﹇
            130
            ﹈
﹇
130
﹈
            ^
            ﹇
            115
            ﹈
        ﹇
        115
        ﹈
            ^
            ﹇
            105
            ﹈
    ﹇
    105
            ^
            ﹇
            96
            ﹈
        ﹇
        96
            ^
            ﹇
            69
            55
            ﹈
        55
        ﹈
            ^
            ﹇
            50
            ﹈
    50
    ﹈
            ^
            ﹇
            43
            ﹈
        ﹇
        43
            ^
            ﹇
            20
            12
            ﹈
        12
        ﹈
            ^
            ﹇
            10
            ﹈

tree in order:  |10|12|12|20|43|43|50|50|55|55|69|96|96|105|105|115|115|130|130|135|135|145|145|200|200|300|
tree preorder:  |130|50|12|10|43|12|20|43|105|55|50|96|55|69|96|115|105|115|145|135|130|135|200|145|200|300|
tree postorder: |10|12|20|12|43|43|50|55|69|55|96|96|50|105|115|115|105|130|135|135|145|200|300|200|145|130|
tree size is : 15
tree items is: 26
tree is empty: false
tree is valid: true

..................................................

remove on empty: false

--------------------------------------------------

[       OK ] BASIC_TEST.TestBPlusTree (38 ms)
[----------] 1 test from BASIC_TEST (38 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (39 ms total)
[  PASSED  ] 1 test.
*/